<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="902" height="650" backgroundColor="0x000000" creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import flash.external.*;
			import mx.collections.ArrayList;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			// Cirrus server url
			[Bindable] private var cirrusUrl:String = "rtmfp://p2p.rtmfp.net/3c3d0d58f149cadee5d85081-5cad0f1df407/";
			
			// Cirrus developer key
			private const cirrusDeveloperKey:String = "3c3d0d58f149cadee5d85081-5cad0f1df407";
			
			// Service URL for exchanging peer ids
			private const peerServiceUrl:String = "http://chatlow.com/findPeer/"; //"http://localhost:55556/";
			
			// Service for exchanging peer ids
			private var peerService:HTTPService = null;
			
			// Connection to Cirrus service
			private var netConnection:NetConnection;
			
			// Outgoing media stream
			private var outgoingStream:NetStream;
			
			// Incoming media stream
			private var incomingStream:NetStream;
			
			// Peer's video
			private var peerVideo:Video;
			
			// Flash shared object for storing user settings
			private var localSO:SharedObject;
			
			// Microphones
			[Bindable] private var micNames:ArrayList = new ArrayList();
			private var micIndex:int = 0;
			
			// Cameras
			[Bindable] private var cameraNames:ArrayList = new ArrayList();
			private var cameraIndex:int = 0;
			
			// States
			private const Disconnected:String = "Disconnected";
			private const Connecting:String = "Connecting";
			private const Connected:String = "Connected";
			
			// Initialization    		
			private function init():void {
				currentState = Disconnected;
				localSO = SharedObject.getLocal("chatlowSettings");
				initMics();
				initCams();
				initSpeakers();
				initVideo();
				initPeerService();
				connectToCirrus();
			}
			
			private function initMics():void {
				var mics:Array = Microphone.names;
				if (mics) {
					micNames.source = mics;
				}
				else {
					status("No microphone available.");
				}
				
				// selected mic device
				micIndex = 0;
				if (localSO.data.hasOwnProperty("micIndex")) {
					micIndex = localSO.data.micIndex;
				}
				
				micSelection.selectedIndex = micIndex;
				
				// mic volume
				var micVolume:int = 50;
				if (localSO.data.hasOwnProperty("micVolume")) {
					micVolume = localSO.data.micVolume;
				}
				micVolumeSlider.value = micVolume;
				
				// configure audio and video
				var mic:Microphone = getMicrophone();
				if (mic) {
					mic.gain = micVolume;
					setCodec();
				}
			}
			
			private function initCams():void {
				var cameras:Array = Camera.names;
				if (cameras) {
					cameraNames.source = cameras;
				} else {
					status("No camera available.");
				}
				
				// selected camera device
				if (localSO.data.hasOwnProperty("cameraIndex")) {
					cameraIndex = localSO.data.cameraIndex;
				}
				cameraSelection.selectedIndex = cameraIndex;
				
				var camera:Camera = Camera.getCamera(cameraIndex.toString());
				if (camera) {
					cameraChanged();
				}
			}
			
			private function initSpeakers():void {
				// speaker volume
				var speakerVolume:Number = 80;
				if (localSO.data.hasOwnProperty("speakerVolume"))
				{
					speakerVolume = localSO.data.speakerVolume;
				}
				
				speakerVolumeSlider.value = speakerVolume;
			}
			
			private function status(msg:String):void {
				textOutput.text += "System: " + msg + "\n";
				textOutput.validateNow();
			}
			
			private function clearTextBox():void {
				textOutput.text = "";
			}
			
			private function connectToCirrus():void {
				clearTextBox();
				
				netConnection = new NetConnection();
				netConnection.addEventListener(NetStatusEvent.NET_STATUS, cirrusConnectionHandler);
				
				try {
					netConnection.connect(cirrusUrl, cirrusDeveloperKey);
				} catch (e:ArgumentError) {
					status("There was a problem connecting to the server(1)...");
					disconnect();
					return;
				}
			}
			
			private function cirrusConnectionHandler(event:NetStatusEvent):void {
				status(event.info.code);
				switch (event.info.code) {
					case "NetConnection.Connect.Success":
						status("Welcome to chatlow!  Press \"Connect\" to get started.");
						// status("ID = " + netConnection.nearID);
						break;
					
					case "NetConnection.Connect.Closed":
					case "NetStream.Connect.Closed":
						if (currentState == Connected) {
							currentState = Disconnected;
							status("Stranger disconnected, finding new stranger...");
							disconnect();
							findPeer();
						}
					
					case "NetStream.Connect.Success":
						// we get this when other party connects to our outgoing stream
						break;
					
					case "NetConnection.Connect.Failed":
						status("There was a problem connecting to the server(2)...");
						disconnect();
						break;
				}
			}
			
			private function initPeerService():void {
				if (peerServiceUrl.length == 0) {
					status("There was a problem connecting to the server(3)...");
					disconnect();
					return;
				}
				
				peerService = new HTTPService();
				peerService.url = peerServiceUrl;
				peerService.addEventListener("result", handlePeerServiceResponse);
				peerService.addEventListener("fault", handlePeerServiceError);
			}
			
			// process successful response from web service		
			private function handlePeerServiceResponse(e:ResultEvent):void {	
				var result:Object = e.result as Object;
				if (result.hasOwnProperty("id")) {
					status("Stranger found!");
					connectToPeer(result.id);
				} else {
					status("The server is not responding...");
					disconnect();
				}
			}
			
			// process error from web service
			private function handlePeerServiceError(e:FaultEvent):void {
				status("There was a problem connecting to the server(4)...");
				disconnect();
			}
			
			private function disconnect():void {
				currentState = Disconnected;
				peerVideo.clear();
				peerVideo.attachNetStream(null);
				
				if (incomingStream) {
					incomingStream.close();
				}
				
				if (outgoingStream) {
					outgoingStream.close();
				}
				
				incomingStream = null;
				outgoingStream = null;
			}
			
			private function findPeer():void {
				currentState = Connecting;
				var request:Object = new Object();
				request.id = netConnection.nearID;
				// when making repeated calls to same user, it seemed that
				// we recived cached result. So add time, to it to make it unique.
				var now:Date = new Date();
				request.time = now.getTime();
				peerService.cancel();
				peerService.send(request);
			}
			
			private function connectToPeer(id:String):void {
				if (id.length != 64) {
					status("There was a problem connecting to the stranger.");
					disconnect();
					findPeer();
					return;
				}
				// caller publishes media stream
				outgoingStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);
				outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, outgoingStreamHandler);
				outgoingStream.publish("chatlow-video");
				
				var o:Object = new Object
				o.onPeerConnect = function(caller:NetStream):Boolean {
					status("Connected to new stranger.");
					return true;
				}
				outgoingStream.client = o;
				
				startAudio();
				startPeerVideo();
				
				incomingStream = new NetStream(netConnection, id);
				incomingStream.bufferTime = 0.1;
				incomingStream.addEventListener(NetStatusEvent.NET_STATUS, incomingStreamHandler);
				incomingStream.play("chatlow-video");
				
				var st:SoundTransform = new SoundTransform(speakerVolumeSlider.value / 100);
				incomingStream.soundTransform = st;
				
				incomingStream.receiveAudio(true);
				incomingStream.receiveVideo(true);
				
				var i:Object = new Object;
				i.onIm = function(text:String):void
				{
					textOutput.text += "Stranger: " + text + "\n";
					textOutput.validateNow();
				}
				incomingStream.client = i;
				
				peerVideo.attachNetStream(incomingStream);
				
				// clearTextBox();
				currentState = Connected;
			}
			
			private function incomingStreamHandler(event:NetStatusEvent):void {
				// For debugging
				status(event.info.code);
			}
			
			private function outgoingStreamHandler(event:NetStatusEvent):void {
				// For debugging
				status(event.info.code);
			}
			
			private function onSendText():void {
				var msg:String = textInput.text;
				if (msg.length != 0 && outgoingStream)
				{
					textOutput.text += "You: " + msg + "\n";
					outgoingStream.send("onIm", msg);
					textInput.text = "";
				}
			}
			
			private function startAudio():void {
				var mic:Microphone = getMicrophone();
				if (mic && outgoingStream) {
					outgoingStream.attachAudio(mic);
				}
			}
			
			private function getMicrophone():Microphone {
				return Microphone.getEnhancedMicrophone(micIndex);
			}
			
			private function startPeerVideo():void {
				var camera:Camera = Camera.getCamera(cameraIndex.toString());
				if (camera && outgoingStream) {
					outgoingStream.attachCamera(camera);
				}
			}
			
			private function initVideo():void {
				var camera:Camera = Camera.getCamera(cameraIndex.toString());
				if (camera) {
					localVideoDisplay.attachCamera(camera);
				}
				
				peerVideo = new Video();
				peerVideo.width = 320;
				peerVideo.height = 240;
				peerVideoDisplay.addChild(peerVideo);
			}
			
			private function speakerVolumeChanged(e:Event):void
			{
				if (incomingStream) {
					var volume:Number = e.target.value / 100;
					var st:SoundTransform = new SoundTransform(volume);
					incomingStream.soundTransform = st;
				}
				
				localSO.data.speakerVolume = e.target.value;
				try {
					localSO.flush();
				} catch (e:Error) {
					status("Cannot write shared object\n");
				}
			}
			
			private function micVolumeChanged(e:Event):void {
				var mic:Microphone = getMicrophone();
				if (mic) {
					mic.gain = e.target.value;
					
					localSO.data.micVolume = e.target.value;
					localSO.flush();
				}
			}
			
			private function micChanged(event:Event):void {
				micIndex = micSelection.selectedIndex;
				
				var mic:Microphone = getMicrophone();
				
				// set the new microphne values based on UI
				mic.gain = micVolumeSlider.value;
				
				setCodec();
				
				if (currentState == Connecting) {	
					outgoingStream.attachAudio(mic);
				}
				
				localSO.data.micIndex = micIndex;
				try
				{
					localSO.flush();
				}
				catch (e:Error)
				{
					status("Cannot write shared object\n");
				}
			}
			
			private function setCodec():void {
				var mic:Microphone = getMicrophone();
				if (mic) {
					mic.codec = SoundCodec.SPEEX;
					mic.framesPerPacket = 1;
					mic.encodeQuality = 10;
					mic.setSilenceLevel(0);
				}
			}
			
			private function cameraChanged(event:Event = null):void {
				cameraIndex = cameraSelection.selectedIndex;
				
				var camera:Camera = Camera.getCamera(cameraIndex.toString());
				
				if (camera)
				{
					camera.setMode(320, 240, 15);
					camera.setQuality(0, 90);
				}
				
				// when user changes video device, we want to show preview
				localVideoDisplay.attachCamera(camera);
				
				if (currentState == Connected) {	
					outgoingStream.attachCamera(camera);
				}
				
				localSO.data.cameraIndex = cameraIndex;
				try {
					localSO.flush();
				} catch (e:Error) {
					status("Cannot write shared object\n");
				}
			}
		]]>
	</fx:Script>
	
	<fx:Style>
		.buttonStyle {
			color: "0xFFFFFF";
			chromeColor: "0xFF3000";
			focusColor: "0x409BF0";
			height: "23";
			width: "87";
			fontFamily: "Verdana";
		}
	</fx:Style>
	
	<s:states>
		<s:State name="Disconnected"/>
		<s:State name="Connecting"/>
		<s:State name="Connected"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup>
		<s:HGroup height="60" paddingTop="5" paddingBottom="5">
			<mx:Image source="@Embed('assets/logo_small.png')"/>
		</s:HGroup>
		<s:HGroup>
			<s:BorderContainer cornerRadius="0" backgroundColor="0x303030" borderStyle="solid">
				<s:layout>
					<s:VerticalLayout paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10"/>
				</s:layout>
				
				<s:HGroup>
					<s:VGroup>
						<s:HGroup>
							<s:VGroup includeIn="Disconnected" horizontalAlign="right">
								<s:Button x="-17" label="Connect (Ctrl)"
										  click="findPeer()" styleName="buttonStyle"/>
							</s:VGroup>
							<s:VGroup includeIn="Connecting" horizontalAlign="right">
								<s:Label text="Connecting..." color="0xffffff"/>
							</s:VGroup>
							<s:VGroup includeIn="Connected" horizontalAlign="right">
								<s:HGroup>
									<s:Button label="Next (Ctrl)" click='disconnect(); findPeer()' styleName="buttonStyle"/>
									<s:Button label="Disconnect (Esc)" click='status("You disconnected."); disconnect()' styleName="buttonStyle"/>
								</s:HGroup>
							</s:VGroup>
						</s:HGroup>
						<s:HGroup>
							<mx:VideoDisplay id="peerVideoDisplay" width="320" height="240" />
						</s:HGroup>
						<s:HGroup>
							<mx:VideoDisplay id="localVideoDisplay" width="320" height="240" />
							<mx:Spacer height="10" />
						</s:HGroup>
					</s:VGroup>
					<s:VGroup>
						<s:HGroup>
							<s:TextInput id="textInput" width="472" enter="onSendText()" />
							<s:Button label="Send" click="onSendText()" styleName="buttonStyle" enabled="{textInput.text.length > 0 &amp;&amp; currentState == Connected}"/>
						</s:HGroup>
						<s:TextArea id="textOutput" width="550" height="485" editable="false"
									verticalScrollPolicy="auto"/>
					</s:VGroup>
				</s:HGroup>
				<s:HGroup>
					<s:BorderContainer width="882" backgroundColor="0x636363" borderStyle="solid" cornerRadius="10">
						<s:HGroup paddingBottom="5" paddingLeft="30" paddingRight="30" paddingTop="5">
							<s:VGroup height="22" verticalAlign="middle">
								<s:Label color="0xffffff" fontFamily="Verdana" text="Microphones"/>
							</s:VGroup>
							<s:VGroup height="22" verticalAlign="middle">
								<s:ComboBox id="micSelection" textAlign="center" fontFamily="Verdana" dataProvider="{micNames}" change="micChanged(event)" color="black"/>
							</s:VGroup>
							<s:VGroup height="22" verticalAlign="middle">
								<s:Label text="Cameras" verticalAlign="middle" fontFamily="Verdana" color="0xffffff" textAlign="right"/>
							</s:VGroup>
							<s:VGroup height="22" verticalAlign="middle">
								<s:ComboBox id="cameraSelection" textAlign="center" fontFamily="Verdana" dataProvider="{cameraNames}" change="cameraChanged(event)" color="black"/>
							</s:VGroup>
							<s:VGroup height="22" verticalAlign="middle">
								<s:Label width="56" color="0xffffff" fontFamily="Verdana" text="Mic"
										 textAlign="right" verticalAlign="middle"/>
							</s:VGroup>
							<s:VGroup height="22" verticalAlign="middle">
								<s:HSlider id="micVolumeSlider" showDataTip="false" width="120" minimum="0" maximum="100" change="micVolumeChanged(event)"/>
							</s:VGroup>
							<s:VGroup height="22" verticalAlign="middle">
								<s:Label text="Speaker" verticalAlign="middle" fontFamily="Verdana" color="0xffffff" width="56" textAlign="right"/>
							</s:VGroup>
							<s:VGroup height="22" verticalAlign="middle">
								<s:HSlider id="speakerVolumeSlider" showDataTip="false" width="120" minimum="0" maximum="100" change="speakerVolumeChanged(event)"/>
							</s:VGroup>
						</s:HGroup>
					</s:BorderContainer>
				</s:HGroup>
			</s:BorderContainer>
		</s:HGroup>
	</s:VGroup>
</s:Application>
